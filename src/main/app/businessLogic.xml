<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" 
xmlns="http://www.mulesoft.org/schema/mule/core" 
xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
xmlns:spring="http://www.springframework.org/schema/beans" 
xmlns:json="http://www.mulesoft.org/schema/mule/json"
 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd">
    <batch:job name="businessLogicBatch" max-failed-records="-1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="getContactInBStep">
                <enricher   doc:name="store result in 'payload.Id' and payload.LastModifiedDateB">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, LastModifiedDate FROM Contact WHERE Email = '#[payload.Email]'" doc:name="Query contact in Salesforce instance B"/>
                    <enrich source="#[payload == null ? null : payload.Id]" target="#[payload.Id]"/>
                    <enrich source="#[payload == null ? null : payload.LastModifiedDate]" target="#[payload.LastModifiedDateB]"/>
                </enricher>
            </batch:step>
            <batch:step name="enrichWithAccountInAWhenPush" accept-expression="('syncAccount' == '${account.sync.policy}') &amp;&amp; ('push' == '${trigger.policy}') &amp;&amp; (payload.AccountId != null)">
                <enricher source="#[payload]" target="#[payload.Account]" doc:name="Store in Account">
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Name,AccountNumber,Description,Industry,NumberOfEmployees FROM Account WHERE Id = '#[payload.AccountId]'" doc:name="query account in A instance"/>
                </enricher>
            </batch:step>
            
            <batch:step name="findAccountInBStep" accept-expression="'syncAccount' == '${account.sync.policy}' &amp;&amp; payload['Account'] != null &amp;&amp; (payload['LastModifiedDateB'] == null || (new org.joda.time.DateTime(payload.LastModifiedDate)).isAfter(new org.joda.time.DateTime(payload.LastModifiedDateB)))">
            	<enricher source="#[payload == null ? null : payload.Id]" target="#[payload.AccountId]" doc:name="store result in 'payload.AccountId'">
            		<sfdc:query-single config-ref="SalesforceB" query="SELECT Id FROM Account WHERE Name = '#[payload.Account.Name]'" doc:name="Query Account in  Salesforce Instance B"/>
        		</enricher>
            </batch:step>
            
            <batch:step name="createAccountInBIfNecessaryStep" accept-expression="payload != null &amp;&amp;  payload.Account != null &amp;&amp; payload.AccountId == null &amp;&amp; (payload['LastModifiedDateB'] == null || (new org.joda.time.DateTime(payload.LastModifiedDate)).isAfter(new org.joda.time.DateTime(payload.LastModifiedDateB)))">
                <batch:commit size="200" doc:name="Batch Commit">
                	<flow-ref name="createAccountsFlow" doc:name="createAccountsFlow"/>
                </batch:commit>
            </batch:step>

            <batch:step name="createContactsInBStep" accept-expression="payload != null &amp;&amp;  (payload['LastModifiedDateB'] == null || (new org.joda.time.DateTime(payload.LastModifiedDate)).isAfter(new org.joda.time.DateTime(payload.LastModifiedDateB)))">
                <batch:commit size="200" doc:name="Batch Commit">
                    <dw:transform-message doc:name="Prepare payload for upsert">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map
{
	Id: $.Id,
	Email: $.Email,
	Description: $.Description,
	FirstName: $.FirstName,
	LastName: $.LastName,
	MailingCountry: $.MailingCountry,
	Title: $.Title,
	(AccountId: $.AccountId) when ($.AccountId != null) 
}]]></dw:set-payload>
                    </dw:transform-message>
					<sfdc:upsert config-ref="SalesforceB"  type="Contact" doc:name="Upsert contacts in org B" externalIdFieldName="Id">
                        <sfdc:objects ref="#[payload]"/>
					</sfdc:upsert>

                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
            <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log 'Migration process has finished'"/>


        </batch:on-complete>
    </batch:job>
    
    <sub-flow name="createAccountsFlow" >
                <dw:transform-message doc:name="Transform payload to list of Account maps">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map
{
	AccountNumber: $.Account.AccountNumber,
	Description : $.Account.Description,
	Name: $.Account.Name,
	(NumberOfEmployees : $.Account.NumberOfEmployees as :number {class: "java.lang.Integer"}) when ($.Account.NumberOfEmployees != null),
	Industry: $.Account.Industry
}]]></dw:set-payload>
                </dw:transform-message>
        <sfdc:create config-ref="SalesforceB" type="Account" doc:name="create Account in Salesforce Instance B">
            <sfdc:objects ref="#[payload]"/>
        </sfdc:create>
        <foreach doc:name="For Each">
            <choice doc:name="Choice">
                <when expression="#[payload.success]">
                    <expression-component doc:name="Set the AccountId"><![CDATA[records[counter-1].payload['AccountId'] = payload.id]]></expression-component>
                </when>
                <otherwise>
                    <logger message="could not create account for record " doc:name="Log 'could not create account for record'"/>
                </otherwise>
            </choice>
        </foreach>
    </sub-flow>

    <flow name="mainFlow"  processingStrategy="synchronous" doc:description="This flow is the entry point to the Anypoint Template  business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Anypoint Template  exposes to trigger it.

">
        <batch:execute name="businessLogicBatch" doc:name="businessLogicBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>
    
    
</mule>
