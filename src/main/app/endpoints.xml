<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" 
 xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">

    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="${http.port}" doc:name="HTTP Listener Configuration"/>
    <flow name="triggerPushFlow"  initialState="started">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/" doc:name="HTTP"/>

        <choice doc:name="Trigger Policy">
            <when expression="#['push' == '${trigger.policy}']">
                <dw:transform-message doc:name="Map XML Notifications to List">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.Envelope.Body.notifications.*Notification map
{
	Id: $.Id,
	AccountId: $.sObject.AccountId,
	Description: $.sObject.Description,
	FirstName: $.sObject.FirstName,
	Email: $.sObject.Email,
	LastModifiedDate: $.sObject.LastModifiedDate,
	LastName: $.sObject.LastName
}
]]></dw:set-payload>
                </dw:transform-message>
                <flow-ref name="mainFlow" doc:name="mainFlow"/>
            </when>
            <otherwise>
                <logger message="Trigger policy has been set to POLL. Sikpping this message" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <set-payload value="&lt;soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:out='http://soap.sforce.com/2005/09/outbound'&gt;&lt;soapenv:Header/&gt;&lt;soapenv:Body&gt;&lt;out:notificationsResponse&gt;&lt;out:Ack&gt;true&lt;/out:Ack&gt;&lt;/out:notificationsResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;" doc:name="Set response body"/>

    </flow>
    
        <flow name="triggerFlow"  processingStrategy="synchronous" doc:description="This is the simpliest entry point to start the excecution of your Anypoint Template you should: 
	* Define any inbound endpoint
	* Handle any input parameter and transform it into the expected format by the mainFlow
Here you should not: 
	* Run validations against external systems
	* Choose flow of your application based on input parameters">
       	<poll doc:name="fireup Contact synchronization" >
          	<fixed-frequency-scheduler frequency="${polling.frequency}" startDelay="${polling.startDelayMillis}"/>
          	<watermark variable="lastQueryDate" default-expression="${watermark.default.expression}" selector="MAX" selector-expression="#[payload.LastModifiedDate]"/>
           	<sfdc:query config-ref="SalesforceA"  doc:name="Query Contacts with filtering criteria from Salesforce Instance A" query="SELECT Account.Id, Account.Name, Account.Description, Account.Industry, Account.NumberOfEmployees, Email,FirstName, LastModifiedDate, LastName, MailingCountry, Title
 FROM Contact WHERE LastModifiedDate &gt; #[flowVars['lastQueryDate']] AND Email != null AND MailingCountry IN ('U.S.','United States','US')">
          	</sfdc:query>
      	</poll>
        <choice doc:name="Trigger Policy">
            <when expression="#['poll' == '${trigger.policy}']">
                <flow-ref name="mainFlow" doc:name="mainFlow"/>
            </when>
            <otherwise>
                <logger message="Trigger policy has been set to PUSH. Skipping this message." level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </flow>

</mule>
